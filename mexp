#!/usr/bin/env perl
#
# mexp was written by Omar Polo <op@openbsd.org> and is placed in the
# public domain.  The author hereby disclaims copyright to this source
# code.

use open ":std", ":encoding(UTF-8)";
use utf8;
use strict;
use warnings;
use v5.32;

use List::Util qw(max min);

use OpenBSD::Pledge;
use OpenBSD::Unveil;

use lib ".";
use GotMArc qw(parse san urlencode initpage endpage thread_header);

my $outdir = $ENV{'OUTDIR'};
die 'Set $OUTDIR' unless defined $outdir;

unveil("/usr/local/bin/mshow", "rx") or die "unveil mshow: $!";
unveil($outdir, "rwc") or die "unveil $outdir: $!";

unveil(".", "r") or die "unveil .: $!";

pledge("stdio rpath wpath cpath proc exec") or die "pledge: $!";

sub export_part {
	my ($fh, $n, $fname) = @_;

	my $pid = fork;
	die "fork: $!" unless defined $pid;
	if ($pid == 0) {
		open \*STDOUT, '>&', $fh
		    or die "can't redirect stdout: $!";
		exec 'mshow', '-F', '-O', $fname, $n
		    or die "can't exec mshow: $!";
	}

	waitpid $pid, 0;
	die "mshow exited with $? ($n, $fname)" if $?;
}

# like libutil' fmt_scaled
sub humanize {
	my $number = shift;
	my @units = qw(             G          M     K  B);
	my @scale =   (1024*1024*1024, 1024*1024, 1024, 1);

	for (my $i = 0; $i < @scale; $i++) {
		if ($scale[$i] < $number) {
			my $r = $number / $scale[$i];
			return sprintf "%.0f%s", $r, $units[$i];
		}
	}
}

sub thrnav {
	my ($fh, $p, $n, $mid, $tid) = @_;
	my @prev = @{$p};
	my @next = @{$n};

	return if !@prev && !@next;
	print $fh "<nav>";

	if (@prev) {
		my $mail = $prev[-1];
		my $encmid = $mail->{mid};
		say $fh "<a href='/mail/$encmid.html'>Previous</a>";
	} else {
		say $fh "<span>Previous</span>";
	}

	if (defined($mid) && defined($tid)) {
		my $encmid = urlencode $mid;
		my $enctid = urlencode $tid;
		say $fh "<a href='/text/$encmid.txt'>Raw body</a>";
		say $fh "<a href='/thread/$enctid.html#$encmid'>Thread</a>";
	}

	if (@next) {
		my $mail = $next[0];
		my $encmid = $mail->{mid};
		say $fh "<a href='/mail/$encmid.html'>Next</a>";
	} else {
		say $fh "<span>Next</span>";
	}

	print $fh "</nav>";
}

sub min_level {
	my $l = 999;
	return 0 unless @_;
	for (@_) {
		$l = $_->{level} if $_->{level} < $l;
	}
	return $l;
}

sub threntry {
	my ($fh, $base, $last_level, $cur, $mail) = @_;
	my $level = $mail->{level} - $base;

	say $fh "</ul></li>" x ($last_level - $level) if $last_level > $level;
	say $fh "<li><ul>" if $last_level < $level;

	my $encmid = urlencode $mail->{mid};

	print $fh "<li id='$encmid' class='mail'>";
	print $fh "<p class='mail-meta'>";
	print $fh "<time>$mail->{date}</time> ";
	print $fh "<span class='from'>$mail->{from}</span>";
	print $fh "<span class='colon'>:</span>";
	print $fh "</p>";
	print $fh "<p class='subject'>";

	my $subj = $mail->{subj};
	if ($mail->{mid} ne $cur->{mid}) {
		print $fh "<a href='/mail/$encmid.html'>$subj</a>";
	} else {
		print $fh "<span>$subj</span>";
	}

	print $fh "</p>";
	print $fh "</li>\n";

	return $level;
}

sub thrslice {
	my ($fh, $mail, $p, $n) = @_;
	my @prev = @{$p};
	my @next = @{$n};
	my @thread = (@prev, $mail, @next);
	return unless @thread;
	my $base = min_level @thread;
	my $level = 0;
	print $fh "<div class='thread'>";
	print $fh "<ul class='mails'>";
	$level = threntry $fh, $base, $level, $mail, $_ for @thread;
	print $fh "</ul></li>" x $level;
	print $fh "</ul></div>";
}

sub export_one {
	my ($mail, $prev, $next) = @_;
	my $dest = "$outdir/mail/$mail->{mid}.html";

	open(my $fh, '>', "$dest") or die "can't open $dest: $!";

	initpage $fh, $mail->{subj};

	open(my $mshow, "-|", "mshow", "-nNA", "text/plain", $mail->{fname})
	    or die "can't exec mshow: $!";

	open(my $text, '>', "$outdir/text/$mail->{mid}.txt")
	    or die "can't open $outdir/text/$mail->{mid}.txt: $!";

	my @hdrs;
	while (<$mshow>) {
		last if /^$/;

		# drop the (1 day ago) string
		s/ \(.*\)// if /^Date:/;
		print $text $_;
		push @hdrs, san($_);
	}
	say $text "";

	thread_header $fh, $mail->{tid}, $mail->{mid}, \@hdrs;

	print $fh "<pre>";
	while (<$mshow>) {
		print $text $_;
		print $fh san($_);
	}
	print $fh "</pre>";

	# generate the listing for the exported parts
	open(my $parts, '-|', 'mshow', '-t', $mail->{fname})
	    or die "can't exec mshow: $!";

	my $partno = 0;
	while (<$parts>) {
		my ($n, $mime, $size, $name) =
		    m/(\d+): ([^ ]+) size=(\d+) name="(.*)"/ or next;

		next if $mime =~ m(application/application/pgp-signature);
		next if $mime =~ m(audio/*);
		next if $mime =~ m(video/*);

		my $ext = "bin";
		if ($mime =~ m(image/*)) {
			if ($mime eq "image/gif") {
				$ext = "gif";
			} elsif ($mime eq "image/jpeg") {
				$ext = "jpg";
			} elsif ($mime eq "image/png") {
				$ext = "png";
			} else {
				# skip other image types for now.
				next;
			}
		}

		# text/* is bundled in the body by mshow(1).

		say $fh "<ul class='parts'>" if $partno == 0;
		$partno++;

		my $path = "$outdir/parts/$mail->{mid}.$partno.$ext";
		open my $p, '>', $path
		    or die "can't open $mail->{fname}: $!";
		export_part($p, $n, $mail->{fname});
		close($p);

		$path =~ s,^.*/parts/,/parts/,;

		my $url = san($path);
		my $hs = humanize $size;
		say $fh "<li><a href='$url'>$name ($hs)</a></li>";
	}
	say $fh "</ul>" if $partno > 0;

	thrnav $fh, $prev, $next, $mail->{mid}, $mail->{tid};
	thrslice $fh, $mail, $prev, $next;

	endpage $fh;

	close($text);
	close($mshow);
	close($parts);
	close($fh);

	unlink $parts;
}

sub export {
	my @thread = @_;

	for (my $i = 0; $i < @thread; $i++) {
		my (@prev, @next);
		@prev = @thread[max($i-2, 0)..$i-1] if $i > 0;
		@next = @thread[$i+1..min($i+2, @thread - 1)]
		    if $i + 1 < @thread;
		export_one $thread[$i], \@prev, \@next;
	}
}

my $tid;
my @thread;
while (<>) {
	my $mail = parse $_;

	if ($mail->{level} == 0 && @thread) {
		export @thread;
		@thread = ();
	}

	$tid = $mail->{mid} if $mail->{level} == 0;
	die "unknown tid" unless defined $tid;
	$mail->{tid} = $tid;

	# export_one $mail, $tid
	push @thread, $mail;
}

export @thread if @thread;
