#!/usr/bin/env perl
#
# mexp was written by Omar Polo <op@openbsd.org> and is placed in the
# public domain.  The author hereby disclaims copyright to this source
# code.

use open ":std", ":encoding(UTF-8)";
use utf8;
use strict;
use warnings;
use v5.32;
use File::Temp qw(tempfile);

use OpenBSD::Pledge;
use OpenBSD::Unveil;

use lib ".";
use GotMArc qw(parse san urlencode initpage endpage thread_header);

my $outdir = $ENV{'OUTDIR'};
die 'Set $OUTDIR' unless defined $outdir;

unveil("/usr/local/bin/mshow", "rx") or die "unveil mshow: $!";
unveil($outdir, "rwc") or die "unveil $outdir: $!";

# can't use tmppath because File::Temp checks whether /tmp exists.
unveil("/tmp", "rwc") or die "unveil /tmp: $!";
unveil(".", "r") or die "unveil .: $!";

# fattr for File::Temp
pledge("stdio rpath wpath cpath proc exec fattr") or die "pledge: $!";

sub export_part {
	my ($fh, $n, $fname) = @_;

	my $pid = fork;
	die "fork: $!" unless defined $pid;
	if ($pid == 0) {
		open \*STDOUT, '>&', $fh
		    or die "can't redirect stdout: $!";
		exec 'mshow', '-F', '-O', $fname, $n
		    or die "can't exec mshow: $!";
	}

	waitpid $pid, 0;
	die "mshow exited with $? ($n, $fname)" if $?;
}

my $tid;
while (<>) {
	my ($level, $fname, $mid, $date, $from, $subj) = parse;

	$tid = $mid if $level == 0;
	die "unknown tid" unless defined $tid;

	my $dest = "$outdir/mail/$mid.html";
	# next if -f $dest;

	open(my $fh, '>', "$dest") or die "can't open $dest: $!";

	initpage $fh, $subj;

	open(my $mshow, "-|", "mshow", "-nNA", "text/plain", $fname)
	    or die "can't exec mshow: $!";

	open(my $text, '>', "$outdir/text/$mid.txt")
	    or die "can't open $outdir/text/$mid.txt: $!";

	my @hdrs;
	while (<$mshow>) {
		last if /^$/;

		# drop the (1 day ago) string
		s/ \(.*\)// if /^Date:/;
		print $text $_;
		push @hdrs, san($_);
	}
	say $text "";

	thread_header $fh, $tid, $mid, \@hdrs;

	print $fh "<pre>";
	while (<$mshow>) {
		print $text $_;
		print $fh san($_);
	}
	print $fh "</pre>";

	# generate the listing for the exported parts
	open(my $parts, '-|', 'mshow', '-t', $fname)
	    or die "can't exec mshow: $!";

	my $part_seen = 0;
	while (<$parts>) {
		my ($n, $mime, $size, $name) =
		    m/(\d+): ([^ ]+) size=(\d+) name="(.*)"/ or next;

		next if $mime =~ m(application/application/pgp-signature);
		next if $mime =~ m(audio/*);
		next if $mime =~ m(video/*);

		my $ext = "bin";
		if ($mime =~ m(image/*)) {
			if ($mime eq "image/gif") {
				$ext = "gif";
			} elsif ($mime eq "image/jpeg") {
				$ext = "jpg";
			} elsif ($mime eq "image/png") {
				$ext = "png";
			} else {
				# skip other image types for now.
				next;
			}
		}

		# text/* is bundled in the body by mshow(1).

		if (!$part_seen) {
			$part_seen = 1;
			say $fh "<ul class='parts'>";
		}

		my ($p, $path) = tempfile "$outdir/parts/$mid.XXXXXXXXXX";
		export_part($p, $n, $fname);
		close($p);
		rename $path, "$path.$ext"
		    or die "can' rename $path as $path.ext";
		chmod 0644, "$path.$ext";

		$path =~ s,^.*/parts/,/parts/,;

		my $url = san("$path.$ext");
		say $fh "<li><a href='$url'>$name ($size)</a></li>";
	}
	say $fh "</ul>" if $part_seen;

	my $encmid = urlencode $mid;
	my $enctid = urlencode $tid;

	print $fh "<nav>";
	print $fh "<a href='/text/$encmid.txt'>Raw body</a>";
	print $fh "<a href='/thread/$enctid.html#$encmid'>Thread</a>";
	print $fh "</nav>\n";

	endpage $fh;

	close($text);
	close($mshow);
	close($parts);
	close($fh);

	unlink $parts;
}
