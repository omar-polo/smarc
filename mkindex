#!/usr/bin/env perl

use open ":std", ":encoding(UTF-8)";
use utf8;
use strict;
use warnings;
use v5.32;

use OpenBSD::Pledge;
use OpenBSD::Unveil;

use lib ".";
use GotMArc qw($logo parse san initpage endpage);

my $outdir = $ENV{'OUTDIR'};
die 'Set $OUTDIR' unless defined $outdir;

my $tfh; # thread file handle
my $pfh; # page file handle
my $page = 0;
my @pages;
my $from_day;
my $to_day;
my $threads_seen = 0;
my $last_level = 0;
my $entries = 0;
my $entries_per_page = 100;

sub maxs {
	my ($a, $b) = @_;
	return $a unless defined $b;
	return $a gt $b ? $a : $b;
}

sub mins {
	my ($a, $b) = @_;
	return $a unless defined $b;
	return $a lt $b ? $a : $b;
}

sub pagename {
	my $i = shift;
	return $i == 1 && "index.html" || "$i.html";
}

sub endfile {
	say $pfh '</ul></div>';
	close($pfh);
	push @pages, "$from_day - $to_day";
}

sub nextfile {
	endfile if defined $pfh;
	$page += 1;
	my $path = pagename($page);
	open($pfh, '>', $path)
	    or die "can't open $path: $!";
	say $pfh "<div class='thread'><ul>";
}

sub nav {
	my ($pfh, $n) = @_;
	my ($first, $last) = (pagename(1), pagename($page));
	my ($next, $prev) = (pagename($n+1), pagename($n-1));

	say $pfh "<nav class='next-prev'>";
	say $pfh "<a href='$first'>First</a>" if $n > 2;
	say $pfh "<a href='$prev'>Prev</a>" if $n > 1;
	say $pfh "<a href='$next'>Next</a>" if $n < $page;
	say $pfh "<a href='$last'>Last</a>" if $n < $page - 1;
	say $pfh "</nav>";
}

sub copyfrom {
	my ($path, $fh) = @_;

	# there are probably faster ways to do this like File::Copy,
	# but it bypasses the bufio cache...
	open(my $pfh, '<', $path) or die "can't open $path: $!";
	print $fh $_ while (<$pfh>);
}

sub renderpages {
	close($pfh);

	for (my $i = 1; $i <= $page; $i++) {
		my $path = pagename($i);
		my $dest = "$outdir/$path";

		open(my $pfh, '>', $dest)
		    or die "can't open $dest for writing: $!";

		my $title = "Game of Trees Mail Archive | page $i";
		initpage($pfh, $title);

		my $subtitle = $pages[$i-1];

		my $hdr = <<EOF;
<header class='index-header'>
  <a href="https://gameoftrees.org" target="_blank">
    <img src='/got.png'
         srcset='/got.png, /got@2x.png 2x'
         alt='"GOT" where the "O" is a cute smiling sun.' />
  </a>
  <h1>Game of Trees Mail Archive</h1>
  <p>Page $i</p>
  <p>$subtitle</p>
</header>
<main>
EOF
		say $pfh $hdr;

		nav $pfh, $i if $page > 1;
		copyfrom($path, $pfh);
		nav $pfh, $i if $page > 1;

		say $pfh "</main>";

		endpage($pfh);
		close($pfh);

		unlink $path;
	}
}

sub endthread {
	say $tfh "</ul></li>" x $last_level;
	say $tfh "</ul>\n</div>\n";
	endpage($tfh);
	close($tfh);

	$last_level = 0;
}

sub nextthread {
	endthread if defined $tfh;
	my ($mid, $subj) = @_;
	my $dest = "$outdir/thread/$mid.html";
	open($tfh, '>', $dest) or die "can't open $dest: $!";
	initpage($tfh, $subj);

	print $tfh "<header class='mail-header'>";
	print $tfh "<p>";
	print $tfh $logo;
	print $tfh "<a href='/'>Index</a>";
	print $tfh "</p>";
	print $tfh "<dl><dt>Thread:</dt><dd>$subj</dd></dl>";
	print $tfh "</header>\n";
	print $tfh "<div class='thread'><ul class='mails'>\n";
}

sub entry {
	my ($fh, $type, $mid, $date, $from, $subj) = @_;
	print $fh "<li id='$mid' class='mail'>";
	print $fh "<p class='mail-meta'>";
	print $fh "<time>$date</time> ";
	print $fh "<span class='from'>$from</span>";
	print $fh "<span class='colon'>:</span>";
	print $fh "</p>";
	print $fh "<p class='subject'>";
	print $fh "<a href='/$type/$mid.html'>$subj</a>";
	print $fh "</p>";
	print $fh "</li>\n";
}

sub thread_entry {
	my ($fh, $mid, $level, $date, $from, $subj) = @_;

	say $fh "</ul>\n</li>" x ($last_level - $level) if $last_level > $level;
	say $fh "<li>\n<ul>" if $last_level < $level;

	entry $fh, "mail", $mid, $date, $from, $subj;
}

unveil($outdir, "rwc") or die "unveil $outdir: $!";
unveil(".", "rwc") or die "unveil .: $!";

pledge("stdio rpath wpath cpath") or die "pledge: $!";

nextfile;

while (<>) {
	my ($level, $fname, $mid, $date, $from, $subj) = parse;

	if ($level == 0) {
		nextthread $mid, $subj;

		$entries++;
		if ($entries > $entries_per_page) {
			nextfile;
			$entries = 0;
			$to_day = undef;
			$from_day = undef;
		}

		my $day = $date =~ s/ .*//r;
		$to_day = mins $day, $to_day;
		$from_day = maxs $day, $from_day;

		entry $pfh, "thread", $mid, $date, $from, $subj;
	}

	thread_entry $tfh, $mid, $level, $date, $from, $subj;
	$last_level = $level;
	$threads_seen = 1;
}

endfile;
endthread if $threads_seen;
renderpages;
