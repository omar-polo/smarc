#!/usr/bin/env perl

use open ":std", ":encoding(UTF-8)";
use utf8;
use strict;
use warnings;
use v5.32;

use File::Copy;

use OpenBSD::Pledge;
use OpenBSD::Unveil;

use lib ".";
use GotMArc qw($logo san mid2path initpage endpage);

my $outdir = $ENV{'OUTDIR'};
die 'Set $OUTDIR' unless defined $outdir;

my $tfh; # thread file handle
my $pfh; # page file handle
my $page = -1;
my $threads_seen = 0;
my $last_level = 0;
my $entries = 0;
my $entries_per_page = 100;

sub pagename {
	my $i = shift;
	return $i == 0 && "index.html" || "$i.html";
}

sub nextfile {
	$entries = 0;
	close($pfh) if defined $pfh;
	$page += 1;
	my $path = pagename($page);
	open($pfh, '>', $path)
	    or die "can't open $path: $!";

	my $title = "Game of Trees Mail Archive";
	$title .= " | page $page" if $page != 0;
	initpage($pfh, $title);

	my $subtitle = $page != 0 ? "<p>Page $page</p>" : "";

	my $hdr = <<EOF;
<header class='index-header'>
  <a href="https://gameoftrees.org" target="_blank">
    <img src='/got.png'
         srcset='/got.png, /got@2x.png 2x'
         alt='"GOT" where the "O" is a cute smiling sun.' />
  </a>
  <h1>Game of Trees Mail Archive</h1>
  $subtitle
</header>
<main>
EOF
	say $pfh $hdr;
}

sub fixfiles {
	close($pfh);

	my ($first, $last) = (pagename(0), pagename($page));

	for (my $i = 0; $i <= $page; $i++) {
		my $path = pagename($i);

		open(my $pfh, '>>', $path)
		    or die "can't open $path for append: $!";

		if ($page > 1) {
			my ($next, $prev) = (pagename($i+1), pagename($i-1));

			say $pfh "<nav class='next-prev'><!-- $pfh -->";
			say $pfh "<a href='$first'>First</a>" if $i > 1;
			say $pfh "<a href='$prev'>Prev</a>" if $i > 0;
			say $pfh "<a href='$next'>Next</a>" if $i < $page;
			say $pfh "<a href='$last'>Last</a>" if $i < $page - 1;
			say $pfh "</nav>";
		}

		say $pfh "</main>";
		endpage($pfh);
		close($pfh);
		move $path, "$outdir/$path";
	}
}

sub nextthread {
	endthread() if defined($tfh);
	my ($mid, $subj) = @_;
	my $dest = "$outdir/thread/$mid.html";
	open($tfh, '>', $dest) or die "can't open $dest: $!";
	initpage($tfh, $subj);

	print $tfh "<header class='mail-header'>";
	print $tfh "<p>";
	print $tfh $logo;
	print $tfh "<a href='/'>Index</a>";
	print $tfh "</p>";
	print $tfh "<dl><dt>Thread:</dt><dd>$subj</dd></dl>";
	print $tfh "</header>\n";
	# print $tfh "<div class='thread'><ul class='mails'>\n";
}

sub endthread {
	say $tfh "</ul></li>" x $last_level;
	say $tfh "</ul></div>\n";
	endpage($tfh);
	close($tfh);

	$last_level = 0;
}

sub entry_raw {
	my ($fh, $sep, $mid, $level, $date, $from, $subj) = @_;
	my $new_thread = $level == 0;

	say $fh "</ul>\n</li>" x ($last_level - $level) if $last_level > $level;
	say $fh "</ul>\n</div>$sep" if $threads_seen && $new_thread;

	if ($new_thread) {
		# don't break threads over multiple pages!
		nextfile if $entries >= $entries_per_page && $fh != $tfh;

		nextthread($mid, $subj);
		say $fh "<div class='thread'>";
	}

	if ($last_level < $level) {
		say $fh "<li>\n<ul>";
	} elsif ($last_level == 0) {
		say $fh "<ul class='mails'>";
	}

	print $fh "<li id='$mid' class='mail'>";
	print $fh "<p class='mail-meta'>";
	print $fh "<time>$date</time> ";
	print $fh "<span class='from'>$from</span>";
	print $fh "<span class='colon'>:</span>";
	if ($fh != $tfh && $level == 0) {
		print $fh " (<a href='/thread/$mid.html'>thread</a>)";
	}
	print $fh "</p>";
	print $fh "<p class='subject'>";
	print $fh "<a href='/mail/$mid.html'>$subj</a>";
	print $fh "</p>";
	print $fh "</li>\n";
}

sub entry {
	$entries++;
	entry_raw($pfh, "<hr />", @_);
	entry_raw($tfh, "", @_);
}

unveil($outdir, "rwc") or die "unveil $outdir: $!";
unveil(".", "rwc") or die "unveil .: $!";

# fattr is needed by move
pledge("stdio rpath wpath cpath fattr") or die "pledge: $!";

nextfile();

while (<>) {
	chomp;
	m/^[^ ]+ <([^>]+)> (.+)(\d{4}-\d{2}-\d{2} \d{2}:\d{2}) <([^>]+)> (.*)/;
	die "woops; $_\n" unless defined $1;

	my ($mid, $indent, $date, $from, $subj) = ($1, $2, $3, $4, $5);
	$from =~ s/\s+$//;
	$from = san($from);
	$subj = san($subj);

	my $level = length($indent) - 1;
	$level = 10 if $indent =~ m/\.\.\d{2}\.\./;

	$mid = mid2path($mid);

	$subj =~ s/\s+/ /g;
	$subj =~ s/\s+$//g;

	entry($mid, $level, $date, $from, $subj);
	$last_level = $level;
	$threads_seen = 1;
}

if ($threads_seen) {
	say $pfh "</ul></li>" x $last_level;
	say $pfh "</ul></div>";
	endthread();
}

fixfiles();
